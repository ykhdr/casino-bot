import enum
import logging
import os
import time
import traceback
from contextlib import closing

from telebot import TeleBot
from telebot.types import Message

from casino_bot.db.entities.entities import User
from casino_bot.db.requests import engine
from casino_bot.db.requests.chat_requests import add_chat
from casino_bot.db.requests.users_requests import add_user, get_user, set_balance, get_user_by_username, add_balance

bot = TeleBot(os.getenv('BOT_TOKEN'))

START_BALANCE = 10000

active_users = []
users_balance = {}


class CasinoWinnings(enum.Enum):
    bar = 20
    grape = 30
    lemon = 40
    seven = 50
    nothing = 0


def combination(value):
    if value == 1:
        return CasinoWinnings.bar
    elif value == 22:
        return CasinoWinnings.grape
    elif value == 43:
        return CasinoWinnings.lemon
    elif value == 64:
        return CasinoWinnings.seven
    else:
        return CasinoWinnings.nothing


def register(user_id, username, message):
    chat_id = message.chat.id
    add_chat(chat_id)

    user = User(id=user_id, username=username, balance=START_BALANCE, chat_id=chat_id)
    add_user(user)

    bot.reply_to(message, f'–¢—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, —Ö—Ä—à. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {START_BALANCE}.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏')


@bot.message_handler(chat_types=['group', 'supergroup'], commands=['bet'])
def handle_bet_cmd(message: Message):
    chat_id = message.chat.id
    params = message.text.split()[1:]

    username = message.from_user.username
    user_id = message.from_user.id

    user = get_user(user_id)

    if not user:
        register(user_id, username, message)
        return

    if not params:
        bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /bet 777')
        return

    bet_s = params[0]

    if not bet_s.isdigit() or int(bet_s) <= 0:
        bot.reply_to(message, '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
        return

    bet = int(bet_s)

    user_balance = user.balance

    if user_balance < bet:
        bot.reply_to(message,
                     f'–ß–µ–ª, –±–∞–ª–∞–Ω—Å–∏–∫ —Ç–æ —Ç–≤–æ–π –Ω—É–ª–µ–≤—ã–π: {user_balance}. –ü–æ–¥–∫–æ–ø–∏-–∫–∞ –∑–ª–∞—Ç—ã—Ö –∏–ª–∏ –¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –ø–æ–º–µ–Ω—å—à–µ')
        return

    ans = bot.send_dice(chat_id, 'üé∞')
    value = int(ans.json['dice']['value'])

    user_balance -= bet
    cw = combination(value)

    set_balance(user, user_balance)
    if cw == CasinoWinnings.nothing:
        time.sleep(1.5)
        bot.reply_to(message, f'–£–ø—Å.. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balance}')
    else:
        gain = bet * cw.value
        add_balance(user_id, gain)
        user = get_user(user_id)
        time.sleep(1.5)
        bot.reply_to(message, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {gain}. –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.balance}')


@bot.message_handler(chat_types=['group', 'supergroup'], commands=['balance'])
def handle_balance_cmd(message: Message):
    username = message.from_user.username
    user_id = message.from_user.id

    user = get_user(user_id)

    if not user:
        register(user_id, username, message)
        return

    bot.reply_to(message, f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.balance}')


@bot.message_handler(chat_types=['group', 'supergroup'], commands=['donate'])
def handle_donate_cmd(message: Message):
    username_from = message.from_user.username
    user_id_from = message.from_user.id

    user_from = get_user(user_id_from)

    if not user_from:
        register(user_id_from, username_from, message)
        return

    params = message.text.split()[1:]

    if len(params) < 2:
        bot.reply_to(message, '–£–∫–∞–∂–∏ –Ω–∏–∫ –∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–∫–∏–Ω—É—Ç—å –Ω–∞ –¥–æ–¥–µ–ø –º–æ–ª–æ–¥–æ–º—É: /donate username 777')
        return

    username_to = params[0]

    user_to = get_user_by_username(username_to)

    if not user_to:
        bot.reply_to(message, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return

    if user_from.id == user_to.id:
        bot.reply_to(message, '–ü–µ—Ä–µ–≤–æ–¥—ã —Å–µ–±–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã')
        return

    if not params[1].isdigit() or int(params[1]) <= 0:
        bot.reply_to(message, '–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
        return

    dep = int(params[1])

    if dep > user_from.balance:
        bot.reply_to(message, f'–ú–∞–ª—ã—à, –Ω–µ –¥–æ—Ä–æ—Å —Ç—ã –µ—â–µ –¥–æ —Ç–∞–∫–∏—Ö —Å—É–º–º. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_from.balance}')
        return

    new_balance_from = user_from.balance - dep
    new_balance_to = user_to.balance + dep

    set_balance(user_from, new_balance_from)
    set_balance(user_to, new_balance_to)

    bot.reply_to(message,
                 f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –¥–∞–ª {username_to} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–µ –±–∞–±–ª–∏—à–∫–æ. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance_from}')


@bot.message_handler(chat_types=['private'], commands=['topup'],
                     func=lambda message: message.from_user.username == os.getenv('ADMIN_USERNAME'))
def top_up_balance(message: Message):
    chat_id = message.chat.id
    params = message.text.split()[1:]

    if len(params) < 2:
        bot.send_message(chat_id, '–£–∫–∞–∂–∏ –Ω–∏–∫ –∏ —Å–∫–æ–ª—å–∫—É —á–µ–ª–æ–≤–µ–∫ –Ω—É–∂–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å –Ω–∞ —Å—á–µ—Ç')
        return

    username = params[0]

    user = get_user_by_username(username)

    if not user:
        bot.send_message(chat_id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç')
        return

    if not params[1].isdigit():
        bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–∏—Å–ª–æ–º > 0')

    adding = int(params[1])

    set_balance(user, user.balance + adding)

    bot.send_message(chat_id,
                     f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {adding}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}')


def migrate_schema():
    try:
        with engine.connect() as conn:
            with closing(conn.connection) as connection:
                cursor = connection.cursor()

                with open("db/db_init.sql", 'r') as f:
                    migration_script = f.read()
                    cursor.execute(migration_script)
                    connection.commit()
        return True
    except:
        logging.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        traceback.print_exc()
        return False


def main():
    if not migrate_schema():
        exit(1)
    bot.infinity_polling()


if __name__ == "__main__":
    main()
